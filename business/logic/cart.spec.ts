// Generated by CodiumAI

import { Cart } from "../models/cart";
import { Product } from "../models/product";
import { ICartRepository } from "../ports/cart";
import { CartBusiness } from "./cart";

describe('CartBusiness', () => {

    // CartBusiness can add a product to the cart and save it to the repository
    it('should add a product to the cart and save it to the repository', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product: Product = new Product({
        id: "1",
        name: "Example Product",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });

      // Act
      await cartBusiness.addToCart(product, 2);
      const count = await cartBusiness.getCount();
      const total = await cartBusiness.getTotal();

      // Assert
      expect(repositoryMock.saveCart).toHaveBeenCalledTimes(1);
      expect(total).toEqual(20);
      expect(count).toEqual(1);
    });

    // CartBusiness can remove a product from the cart and save it to the repository
    it('should remove a product from the cart and save it to the repository', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product: Product = new Product({
        id: "1",
        name: "Example Product",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });
      cartBusiness['cart'].add(product, 2);

      // Act
      await cartBusiness.removeFromCart(product);

      // Assert
      expect(repositoryMock.saveCart).toHaveBeenCalledWith(cartBusiness['cart']);
    });

    // CartBusiness can clear the cart and save it to the repository
    it('should clear the cart and save it to the repository', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product: Product = new Product({
        id: "1",
        name: "Example Product",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });
      cartBusiness['cart'].add(product, 2);

      // Act
      await cartBusiness.clear();

      // Assert
      expect(repositoryMock.saveCart).toHaveBeenCalledWith(cartBusiness['cart']);
    });

    // CartBusiness can handle adding a product that is already in the cart
    it('should handle adding a product that is already in the cart', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product: Product = new Product({
        id: "1",
        name: "Example Product",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });
      await cartBusiness.addToCart(product, 2);

      // Act
      await cartBusiness.addToCart(product, 3);

      // Assert
      expect(repositoryMock.saveCart).toHaveBeenCalledTimes(2);
    });

    // CartBusiness can handle removing a product that is not in the cart
    it('should handle removing a product that is not in the cart', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product: Product = new Product({
        id: "1",
        name: "Example Product",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });

      // Act
      await cartBusiness.removeFromCart(product);

      // Assert
      expect(repositoryMock.saveCart).toHaveBeenCalledWith(cartBusiness['cart']);
    });

    // CartBusiness can handle clearing an empty cart
    it('should handle clearing an empty cart', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);

      // Act
      await cartBusiness.clear();

      // Assert
      expect(repositoryMock.saveCart).toHaveBeenCalledWith(cartBusiness['cart']);
    });

    // CartBusiness can get the items in the cart
    it('should get the items in the cart', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product1: Product = new Product({
        id: "1",
        name: "Product 1",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });
      const product2: Product = new Product({
        id: "2",
        name: "Product 2",
        price: 20,
        quantity: 3,
        nbSold: 0,
        currency: "USD",
      });
      await cartBusiness.addToCart(product1, 2);
      await cartBusiness.addToCart(product2, 1);

      // Act
      const items = await cartBusiness.getItems();

      // Assert
      expect(items.length).toEqual(2);
      expect(items[0].product).toEqual(product1);
      expect(items[0].quantity).toEqual(2);
      expect(items[0].totalPrice).toEqual(20);
      expect(items[1].product).toEqual(product2);
      expect(items[1].quantity).toEqual(1);
      expect(items[1].totalPrice).toEqual(20);
    });

    // CartBusiness can get the count of items in the cart
    it('should return the count of items in the cart', async () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product1: Product = new Product({
        id: "1",
        name: "Product 1",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });
      const product2: Product = new Product({
        id: "2",
        name: "Product 2",
        price: 20,
        quantity: 3,
        nbSold: 0,
        currency: "USD",
      });

      // Act
      await cartBusiness.addToCart(product1, 2);
      await cartBusiness.addToCart(product2, 1);
      const count = await cartBusiness.getCount();

      // Assert
      expect(count).toBe(2);
    });

    // CartBusiness can get the total price of items in the cart
    it('should get the total price of items in the cart', () => {
      // Arrange
      const repositoryMock: jest.Mocked<ICartRepository> = {
        saveCart: jest.fn().mockResolvedValue(undefined),
        getCart: jest.fn().mockResolvedValue(new Cart()),
      };
      const cartBusiness: CartBusiness = new CartBusiness(repositoryMock);
      const product1: Product = new Product({
        id: "1",
        name: "Product 1",
        price: 10,
        quantity: 5,
        nbSold: 0,
        currency: "USD",
      });
      const product2: Product = new Product({
        id: "2",
        name: "Product 2",
        price: 20,
        quantity: 3,
        nbSold: 0,
        currency: "USD",
      });

      // Act
      cartBusiness.addToCart(product1, 2);
      cartBusiness.addToCart(product2, 1);

      // Assert
      expect(cartBusiness.getTotal()).resolves.toBe(40);
    });
});
