// Generated by CodiumAI

import { Cart } from "./cart";
import { Product } from "./product";

describe("Cart", () => {
    // Adding a product to the cart increases the count and updates the total
    it("should increase count and update total when adding a product to the cart", () => {
        const cart = new Cart();
        const product = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product, 1);

        expect(cart.count).toBe(1);
        expect(cart.total).toBe(10);
    });

    // Adding an existing product to the cart increases the quantity and updates the total
    it("should increase quantity and update total when adding an existing product to the cart", () => {
        const cart = new Cart();
        const product = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product, 1);
        cart.add(product, 2);

        expect(cart.count).toBe(1);
        expect(cart.total).toBe(30);
    });

    // Removing a product from the cart decreases the count and updates the total
    it("should decrease count and update total when removing a product from the cart", () => {
        const cart = new Cart();
        const product = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product, 1);
        cart.remove(product);

        expect(cart.count).toBe(0);
        expect(cart.total).toBe(0);
    });

    // Adding a product with a quantity of zero does not change the cart
    it("should not change the cart when adding a product with a quantity of zero", () => {
        const cart = new Cart();
        const product = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product, 0);

        expect(cart.count).toBe(0);
        expect(cart.total).toBe(0);
    });

    // Clearing the cart sets the count and total to zero
    it("should set count and total to zero when clearing the cart", () => {
        const cart = new Cart();
        const product1 = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });
        const product2 = new Product({
            id: "2",
            name: "Product 2",
            price: 20,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product1, 1);
        cart.add(product2, 2);
        cart.clear();

        expect(cart.count).toBe(0);
        expect(cart.total).toBe(0);
    });

    // Getting the count returns the correct number of items in the cart
    it("should return the correct count when items are added to the cart", () => {
        const cart = new Cart();
        const product1 = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });
        const product2 = new Product({
            id: "2",
            name: "Product 2",
            price: 20,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product1, 1);
        cart.add(product2, 2);

        expect(cart.count).toBe(2);
    });

    // Getting the total returns the correct total price of all items in the cart
    it("should return the correct total price when getting the total", () => {
        const cart = new Cart();
        const product1 = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });
        const product2 = new Product({
            id: "2",
            name: "Product 2",
            price: 20,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product1, 2);
        cart.add(product2, 1);

        expect(cart.total).toBe(40);
    });

    // Checking if a product is in the cart returns true if it is and false if it is not
    it("should return true if the product is in the cart and false if it is not", () => {
        const cart = new Cart();
        const product1 = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });
        const product2 = new Product({
            id: "2",
            name: "Product 2",
            price: 20,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product1, 1);

        expect(cart.has(product1)).toBe(true);
        expect(cart.has(product2)).toBe(false);
    });

    // Removing a product not in the cart does not change the cart
    it("should not change the cart when removing a product not in the cart", () => {
        const cart = new Cart();
        const product1 = new Product({
            id: "1",
            name: "Product 1",
            price: 10,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });
        const product2 = new Product({
            id: "2",
            name: "Product 2",
            price: 20,
            quantity: 1,
            nbSold: 0,
            currency: "USD",
        });

        cart.add(product1, 1);

        expect(cart.count).toBe(1);
        expect(cart.total).toBe(10);

        cart.remove(product2);

        expect(cart.count).toBe(1);
        expect(cart.total).toBe(10);
    });

    // Getting the count and total when the cart is empty returns zero
    it("should return zero count and total when the cart is empty", () => {
        const cart = new Cart();

        expect(cart.count).toBe(0);
        expect(cart.total).toBe(0);
    });
});
